{"version":3,"sources":["components/expenseRow.tsx","components/expensesTable.tsx","components/addItem.tsx","components/summary.tsx","App.tsx","serviceWorker.js","state/expenseItemModel.ts","state/expensesItemsStore.ts","index.js"],"names":["ExpenseRow","_ref","expenseItem","onDeleteItem","react_default","a","createElement","title","amountPln","amountEur","type","onClick","id","className","ExpensesTable","observer","store","cellPadding","cellSpacing","expensesItems","map","item","expenseRow_ExpenseRow","removeItem","key","AddExpenseItem","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTitleChange","ev","setState","titleInput","currentTarget","value","onAmountChange","test","amountInput","onSubmit","preventDefault","_this$state","state","onAddItem","parseFloat","replace","inherits","createClass","onChange","minLength","required","pattern","React","Component","Summary","sumEur","sumPln","App","addItem_AddExpenseItem","addItem","summary_Summary","Boolean","window","location","hostname","match","ExpenseItem","Date","now","toFixed","ExpensesItemsStore","push","filter","get","reduce","sum","decorate","observable","computed","action","ReactDOM","render","src_App","initStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.186710cf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ExpenseItem from \"../state/expenseItemModel\";\r\n\r\ninterface Props {\r\n  expenseItem: ExpenseItem;\r\n  onDeleteItem: (id: string) => void;\r\n}\r\n\r\nexport const ExpenseRow: React.SFC<Props> = ({ expenseItem, onDeleteItem }) => {\r\n  function deleteItem() {\r\n    return onDeleteItem(expenseItem.id);\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <td>{expenseItem.title}</td>\r\n      <td>{expenseItem.amountPln}</td>\r\n      <td>{expenseItem.amountEur}</td>\r\n      <td>\r\n        <button type=\"button\" onClick={deleteItem} className={\"delete-button\"}>\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ExpenseRow } from \"./expenseRow\";\r\nimport { observer } from \"mobx-react\";\r\nimport { ExpensesItemsStore } from \"../state/expensesItemsStore\";\r\n\r\ninterface Props {\r\n  store: ExpensesItemsStore;\r\n}\r\n\r\nexport const ExpensesTable: React.SFC<Props> = observer(({ store }) => {\r\n  return (\r\n    <table cellPadding=\"0\" cellSpacing=\"0\">\r\n      <thead>\r\n        <tr>\r\n          <th>Title</th>\r\n          <th>Amount (PLN)</th>\r\n          <th>Amount (EUR)</th>\r\n          <th>Options</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {store.expensesItems.map(item => (\r\n          <ExpenseRow\r\n            expenseItem={item}\r\n            onDeleteItem={store.removeItem}\r\n            key={item.id}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n});\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  onAddItem: (title: string, amountPln: number) => void;\r\n}\r\n\r\ninterface State {\r\n  titleInput: string;\r\n  amountInput: string;\r\n}\r\n\r\nexport class AddExpenseItem extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      titleInput: \"\",\r\n      amountInput: \"\"\r\n    };\r\n  }\r\n\r\n  onTitleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      titleInput: ev.currentTarget.value\r\n    });\r\n  };\r\n\r\n  onAmountChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = ev.currentTarget.value;\r\n    if (/^[0-9]*[.,]{0,1}[0-9]{0,2}$/.test(value)) {\r\n      this.setState({\r\n        amountInput: value\r\n      });\r\n    }\r\n  };\r\n\r\n  onSubmit = (ev: React.FormEvent) => {\r\n    ev.preventDefault();\r\n    const { titleInput, amountInput } = this.state;\r\n    this.props.onAddItem(titleInput, parseFloat(amountInput.replace(\",\", \".\")));\r\n    this.setState({ titleInput: \"\", amountInput: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <form className={\"form-add-expense\"} onSubmit={this.onSubmit}>\r\n          <div>\r\n            <label className={\"input-wrapper\"}>\r\n              <span className={\"input-description\"}>Title of transaction</span>\r\n              <input\r\n                className={\"input\"}\r\n                value={this.state.titleInput}\r\n                onChange={this.onTitleChange}\r\n                minLength={5}\r\n                required\r\n              />\r\n            </label>\r\n            <label className={\"input-wrapper\"}>\r\n              <span className={\"input-description\"}>Amount (in PLN)</span>\r\n              <input\r\n                className={\"input\"}\r\n                value={this.state.amountInput}\r\n                onChange={this.onAmountChange}\r\n                pattern={\"^[0-9]*[.,]{0,1}[0-9]{0,2}$\"}\r\n                required\r\n              />\r\n            </label>\r\n          </div>\r\n          <button className={\"add-button\"}>Add</button>\r\n        </form>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  sumPln: number;\r\n  sumEur: string;\r\n}\r\n\r\nexport const Summary: React.SFC<Props> = ({ sumEur, sumPln }) => {\r\n  return (\r\n    <p>\r\n      Sum: {sumPln} PLN ({sumEur} EUR)\r\n    </p>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { ExpensesTable } from \"./components/expensesTable\";\nimport { observer } from \"mobx-react-lite\";\nimport { ExpensesItemsStore } from \"./state/expensesItemsStore\";\nimport { AddExpenseItem } from \"./components/addItem\";\nimport { Summary } from \"./components/summary\";\n\ninterface Props {\n  store: ExpensesItemsStore;\n}\n\nexport const App: React.SFC<Props> = observer(({ store }) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>List of expenses</h1>\n        <p>1EUR = 4,382 PLN</p>\n      </header>\n      <main>\n        <AddExpenseItem onAddItem={store.addItem} />\n        <ExpensesTable store={store} />\n        <Summary sumEur={store.sumEur} sumPln={store.sumPln}/>\n      </main>\n    </div>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default class ExpenseItem {\r\n  title: string;\r\n  amountPln: number;\r\n  id: string;\r\n\r\n  constructor(title: string, amountPln: number) {\r\n    this.id = Date.now() + amountPln + \"\";\r\n    this.title = title;\r\n    this.amountPln = amountPln;\r\n  }\r\n\r\n  get amountEur() {\r\n    return (this.amountPln * 4.382).toFixed(2);\r\n  }\r\n}\r\n","import { observable, computed, action, decorate } from \"mobx\";\r\nimport ExpenseItem from \"./expenseItemModel\";\r\n\r\nexport class ExpensesItemsStore {\r\n  expensesItems: Array<ExpenseItem> = [];\r\n\r\n  get sumPln(): number {\r\n    return this.expensesItems.reduce((sum, item) => sum + item.amountPln, 0);\r\n  }\r\n\r\n  get sumEur(): string {\r\n    return (this.sumPln * 4.382).toFixed(2);\r\n  }\r\n\r\n  addItem = (title: string, amountPln: number) => {\r\n    const item = new ExpenseItem(title, amountPln);\r\n    this.expensesItems.push(item);\r\n  };\r\n\r\n  removeItem = (id: string) => {\r\n    this.expensesItems = this.expensesItems.filter(item => item.id !== id);\r\n  };\r\n\r\n  static initStore(): ExpensesItemsStore {\r\n    const store = new ExpensesItemsStore();\r\n    const defaultItems = [\r\n      { title: \"Item 1\", amountPln: 30.3 },\r\n      { title: \"Item 2\", amountPln: 1214.15 }\r\n    ];\r\n    store.expensesItems = defaultItems.map(\r\n      item => new ExpenseItem(item.title, item.amountPln)\r\n    );\r\n    return store;\r\n  }\r\n}\r\n\r\ndecorate(ExpensesItemsStore, {\r\n  expensesItems: observable,\r\n  sumEur: computed,\r\n  sumPln: computed,\r\n  removeItem: action,\r\n  addItem: action\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ExpensesItemsStore } from \"./state/expensesItemsStore.ts\";\n\nReactDOM.render(\n  <App store={ExpensesItemsStore.initStore()} />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}